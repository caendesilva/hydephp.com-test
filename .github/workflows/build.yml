name: Build the site

on:
  push:
    branches: [ master ]
    
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Create dotenv
      run: echo "SITE_URL=https://hydephp.com/" > .env
    
    - name: Add Torchlight token
      run: echo "TORCHLIGHT_TOKEN=${{ secrets.TORCHLIGHT_TOKEN }}" >> .env

    - name: Install composer dependencies
      run: composer install --prefer-dist

    - name: Cache node modules
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install Node dependencies
      run: npm install

    - name: Build frontend assets
      run: npm run prod


    - name: Run the Hyde Builder
      run: php hyde build --pretty-urls --run-prettier  --no-interaction


    - name: Create .nojekyll
      run: touch _site/.nojekyll
      
    - name: Create CNAME
      run: echo "hydephp.com" > _site/CNAME

    - name: Create docs redirect
      run: echo '<meta http-equiv="refresh" content="0;url=/docs/master" />' > _site/docs/index.html

    - name: Upload site artifact
      uses: actions/upload-artifact@v3
      with:
        name: site
        path: _site


  # Now we can deploy the site to GitHub Pages!
  deploy:
    runs-on: ubuntu-latest
    needs: build # Run the build job first, otherwise we won't have anything to deploy

    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'gh-pages' # Checkout the gh-pages branch
      
      # (optional) Remove any old files from the gh-pages branch
      - name: Empty site directory
        run: rm -rf *
      
      # Download the compiled site into the current directory
      - name: Download site artifact
        uses: actions/download-artifact@v3
        with:
          name: site
          path: '.'

      # Create a .nojekyll file to prevent GitHub from attempting to compile a Jekyll site
      - name: Create .nojekyll file
        run: touch .nojekyll

      # Commit the changes to the gh-pages branch
      - name: Commit changes
        uses: EndBug/add-and-commit@v9 
        with:
          add: '.'
          message: 'Upload compiled site ${{ github.sha }}' 
